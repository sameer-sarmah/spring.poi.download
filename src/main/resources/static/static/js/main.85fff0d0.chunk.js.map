{"version":3,"sources":["logo.svg","core/rest-client.js","core/odata-client.js","core/deferred.js","core/core-exception.js","core/http.service.js","core/model-factory.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","RestClient","httpSvc","serviceName","Object","classCallCheck","this","baseURL","indexOf","createClass","key","value","resourceId","queryParam","headers","arguments","length","undefined","url","initiateRequest","validateQueryParamString","data","queryParams","trim","segments","split","Error","ODataClient","entityPath","entityID","entityIdStr","getEntityIdAsString","concat","hasOwnProperty","substr","Deferred","promise","Promise","resolve","reject","bind","then","catchError","CoreException","status","textStatus","errorThrown","HttpService","method","params","payload","responseType","toLowerCase","config","withCredentials","requestPromise","axios","request","deferred","catch","error","statusText","errorText","exp","ModelFactory","name","downloadFile","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","header","restClient","wrap","_context","prev","next","getRESTModel","findAll","t0","console","log","stop","_x","_x2","apply","App","react_default","createElement","className","src","logo","alt","onClick","Accept","target","href","download","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.85fff0d0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const HTTP_METHOD_GET='GET';\r\nconst HTTP_METHOD_PUT='PUT';\r\nconst HTTP_METHOD_POST='POST';\r\nconst HTTP_METHOD_PATCH='PATCH';\r\n\r\nexport class RestClient {\r\n    httpSvc;\r\n    serviceName;\r\n    baseURL = '/';\r\n\r\n\r\n    constructor( httpSvc, serviceName) {\r\n        this.httpSvc = httpSvc;\r\n        this.serviceName = (serviceName.indexOf('http') !== -1) ? serviceName : this.baseURL + serviceName;\r\n    }\r\n    // controller/resourceId\r\n    findById(resourceId, queryParam, headers = {}) {\r\n        if (typeof queryParam === 'object') {\r\n            const url = this.serviceName + '/' + resourceId;\r\n            return this.httpSvc.initiateRequest(HTTP_METHOD_GET, url, queryParam, headers);\r\n        } else if (!!queryParam && typeof queryParam === 'string') {\r\n            queryParam = this.validateQueryParamString(queryParam);\r\n            const url = this.serviceName + '/' + resourceId + '?' + queryParam;\r\n            return this.httpSvc.initiateRequest(HTTP_METHOD_GET, url, {}, headers);\r\n        }\r\n        const url = this.serviceName + '/' + resourceId;\r\n        return this.httpSvc.initiateRequest(HTTP_METHOD_GET, url, {}, headers);\r\n\r\n    }\r\n\r\n    // controller\r\n    findAll( queryParam, headers = {}) {\r\n        if (typeof queryParam === 'object') {\r\n            const url = this.serviceName;\r\n            return this.httpSvc.initiateRequest(HTTP_METHOD_GET, url, queryParam, headers);\r\n        } else if (!!queryParam && typeof queryParam === 'string') {\r\n            queryParam = this.validateQueryParamString(queryParam);\r\n            const url = this.serviceName + '?' + queryParam;\r\n            return this.httpSvc.initiateRequest(HTTP_METHOD_GET, url, {}, headers);\r\n        }\r\n        const url = this.serviceName;\r\n        return this.httpSvc.initiateRequest(HTTP_METHOD_GET, url, {}, headers);\r\n\r\n    }\r\n    // controller/resourceId\r\n    update( resourceId, data, queryParam, headers = {}) {\r\n        if (typeof queryParam === 'object') {\r\n            const url = this.serviceName + '/' + resourceId;\r\n            return this.httpSvc.initiateRequest(HTTP_METHOD_PUT, url, queryParam, headers, data);\r\n        } else if (!!queryParam && typeof queryParam === 'string') {\r\n            queryParam = this.validateQueryParamString(queryParam);\r\n            const url = this.serviceName + '/' + resourceId + '?' + queryParam;\r\n            return this.httpSvc.initiateRequest(HTTP_METHOD_PUT, url, {}, headers, data);\r\n        }\r\n        const url = this.serviceName + '/' + resourceId;\r\n        return this.httpSvc.initiateRequest(HTTP_METHOD_PUT, url, {}, headers, data);\r\n\r\n    }\r\n\r\n    patch( resourceId, data, queryParam, headers = {}) {\r\n        if (typeof queryParam === 'object') {\r\n            const url = this.serviceName + '/' + resourceId;\r\n            return this.httpSvc.initiateRequest(HTTP_METHOD_PATCH, url, queryParam, headers, data);\r\n        } else if (!!queryParam && typeof queryParam === 'string') {\r\n            queryParam = this.validateQueryParamString(queryParam);\r\n            const url = this.serviceName + '/' + resourceId + '?' + queryParam;\r\n            return this.httpSvc.initiateRequest(HTTP_METHOD_PATCH, url, {}, headers, data);\r\n        }\r\n        const url = this.serviceName + '/' + resourceId;\r\n        return this.httpSvc.initiateRequest(HTTP_METHOD_PATCH, url, {}, headers, data);\r\n\r\n    }\r\n    // controller\r\n    create( data, queryParam, headers = {}) {\r\n        if (typeof queryParam === 'object') {\r\n            const url = this.serviceName;\r\n            return this.httpSvc.initiateRequest(HTTP_METHOD_POST, url, queryParam, headers, data);\r\n        } else if (!!queryParam && typeof queryParam === 'string') {\r\n            queryParam = this.validateQueryParamString(queryParam);\r\n            const url = this.serviceName + '?' + queryParam;\r\n            return this.httpSvc.initiateRequest(HTTP_METHOD_POST, url, {}, headers, data);\r\n        }\r\n        const url = this.serviceName;\r\n        return this.httpSvc.initiateRequest(HTTP_METHOD_POST, url, {}, headers, data);\r\n\r\n    }\r\n    // controller/resourceId\r\n    delete( resourceId, queryParam, headers = {}) {\r\n        if (typeof queryParam === 'object') {\r\n            const url = this.serviceName + '/' + resourceId;\r\n            return this.httpSvc.initiateRequest('DELETE', url, queryParam, headers);\r\n        } else if (!!queryParam && typeof queryParam === 'string') {\r\n            queryParam = this.validateQueryParamString(queryParam);\r\n            const url = this.serviceName + '/' + resourceId + '?' + queryParam;\r\n            return this.httpSvc.initiateRequest('DELETE', url, {}, headers);\r\n        }\r\n        const url = this.serviceName + '/' + resourceId;\r\n        return this.httpSvc.initiateRequest('DELETE', url, {}, headers);\r\n\r\n    }\r\n\r\n    validateQueryParamString(queryParams) {\r\n        queryParams = queryParams.trim();\r\n        if (queryParams.indexOf('?') > -1) {\r\n            const segments = queryParams.split('?');\r\n            if (segments.length === 2) {\r\n                return segments[1];\r\n            }\r\n            throw Error('Invalid query param string');\r\n\r\n        } else {\r\n            return queryParams;\r\n        }\r\n    }\r\n}\r\n","export class ODataClient {\r\n    baseURL= '/';\r\n\r\n    constructor( httpSvc, serviceName, entityPath) {\r\n        this.httpSvc = httpSvc;\r\n        this.serviceName = (serviceName.indexOf('http') !== -1) ? serviceName : this.baseURL + serviceName;\r\n        this.entityPath = entityPath;\r\n    }\r\n    // endpoint.svc/EntityContainer.EntitySet('1234')\r\n    // Northwind.svc/Order_Details(OrderID=10289,ProductID=3)\r\n    findById(entityID, queryParam, headers = {}) {\r\n        const entityIdStr = this.getEntityIdAsString(entityID);\r\n        if (typeof queryParam === 'object') {\r\n            const url = this.serviceName + '/' + this.entityPath + '(' + entityIdStr + ')';\r\n            return this.httpSvc.initiateRequest('GET', url, queryParam, headers);\r\n        } else if (!!queryParam && typeof queryParam === 'string') {\r\n            queryParam = this.validateQueryParamString(queryParam);\r\n            const url = this.serviceName + '/' + this.entityPath + '(' + entityIdStr + ')?' + queryParam;\r\n            return this.httpSvc.initiateRequest('GET', url, {}, headers);\r\n        }\r\n        const url = this.serviceName + '/' + this.entityPath + '(' + entityIdStr + ')';\r\n        return this.httpSvc.initiateRequest('GET', url, {}, headers);\r\n\r\n\r\n    }\r\n\r\n\r\n    // endpoint.svc/EntityContainer.EntitySet\r\n    findAll( queryParam, headers = {}) {\r\n        if (typeof queryParam === 'object') {\r\n            const url = this.serviceName + '/' + this.entityPath;\r\n            return this.httpSvc.initiateRequest('GET', url, queryParam, headers);\r\n        } else if (!!queryParam && typeof queryParam === 'string') {\r\n            queryParam = this.validateQueryParamString(queryParam);\r\n            const url = this.serviceName + '/' + this.entityPath + '?' + queryParam;\r\n            return this.httpSvc.initiateRequest('GET', url, {}, headers);\r\n        }\r\n        const url = this.serviceName + '/' + this.entityPath;\r\n        return this.httpSvc.initiateRequest('GET', url, {}, headers);\r\n\r\n    }\r\n\r\n    // endpoint.svc/EntityContainer.EntitySet\r\n    find( url, queryParam, headers = {}) {\r\n        if (typeof queryParam === 'object') {\r\n            return this.httpSvc.initiateRequest('GET', url, queryParam, headers);\r\n        } else if (!!queryParam && typeof queryParam === 'string') {\r\n            queryParam = this.validateQueryParamString(queryParam);\r\n            return this.httpSvc.initiateRequest('GET', url, {}, headers);\r\n        }\r\n        return this.httpSvc.initiateRequest('GET', url, {}, headers);\r\n\r\n    }\r\n\r\n    // endpoint.svc/EntityContainer.EntitySet('1234')\r\n    // Northwind.svc/Order_Details(OrderID=10289,ProductID=3)\r\n    update( entityID, data, queryParam, headers = {}) {\r\n        const entityIdStr = this.getEntityIdAsString(entityID);\r\n\r\n        if (typeof queryParam === 'object') {\r\n            const url = this.serviceName + '/' + this.entityPath + '(' + entityIdStr + ')';\r\n            return this.httpSvc.initiateRequest('PUT', url, queryParam, headers, data);\r\n        } else if (!!queryParam && typeof queryParam === 'string') {\r\n            queryParam = this.validateQueryParamString(queryParam);\r\n            const url = this.serviceName + '/' + this.entityPath + '(' + entityIdStr + ')?' + queryParam;\r\n            return this.httpSvc.initiateRequest('PUT', url, {}, headers, data);\r\n        }\r\n        const url = this.serviceName + '/' + this.entityPath + '(' + entityIdStr + ')';\r\n        return this.httpSvc.initiateRequest('PUT', url, {}, headers, data);\r\n\r\n    }\r\n\r\n    patch( entityID, data, queryParam, headers = {}) {\r\n        const entityIdStr = this.getEntityIdAsString(entityID);\r\n\r\n        if (typeof queryParam === 'object') {\r\n            const url = this.serviceName + '/' + this.entityPath + '(' + entityIdStr + ')';\r\n            return this.httpSvc.initiateRequest('PATCH', url, queryParam, headers, data);\r\n        } else if (!!queryParam && typeof queryParam === 'string') {\r\n            queryParam = this.validateQueryParamString(queryParam);\r\n            const url = this.serviceName + '/' + this.entityPath + '(' + entityIdStr + ')?' + queryParam;\r\n            return this.httpSvc.initiateRequest('PATCH', url, {}, headers, data);\r\n        }\r\n        const url = this.serviceName + '/' + this.entityPath + '(' + entityIdStr + ')';\r\n        return this.httpSvc.initiateRequest('PATCH', url, {}, headers, data);\r\n\r\n    }\r\n\r\n    // endpoint.svc/EntityContainer.EntitySet\r\n    create( data, queryParam, headers = {}) {\r\n        if (typeof queryParam === 'object') {\r\n            const url = this.serviceName + '/' + this.entityPath;\r\n            return this.httpSvc.initiateRequest('POST', url, queryParam, headers, data);\r\n        } else if (!!queryParam && typeof queryParam === 'string') {\r\n            queryParam = this.validateQueryParamString(queryParam);\r\n            const url = this.serviceName + '/' + this.entityPath + '?' + queryParam;\r\n            return this.httpSvc.initiateRequest('POST', url, {}, headers, data);\r\n        }\r\n        const url = this.serviceName + '/' + this.entityPath;\r\n        return this.httpSvc.initiateRequest('POST', url, {}, headers, data);\r\n\r\n    }\r\n\r\n    // endpoint.svc/EntityContainer.EntitySet('1234')\r\n    // Northwind.svc/Order_Details(OrderID=10289,ProductID=3)\r\n    delete( entityID, queryParam, headers = {}) {\r\n        const entityIdStr = this.getEntityIdAsString(entityID);\r\n        if (typeof queryParam === 'object') {\r\n            const url = this.serviceName + '/' + this.entityPath + '(' + entityIdStr + ')';\r\n            return this.httpSvc.initiateRequest('DELETE', url, queryParam, headers);\r\n        } else if (!!queryParam && typeof queryParam === 'string') {\r\n            queryParam = this.validateQueryParamString(queryParam);\r\n            const url = this.serviceName + '/' + this.entityPath + '(' + entityIdStr + ')?' + queryParam;\r\n            return this.httpSvc.initiateRequest('DELETE', url, {}, headers);\r\n        }\r\n        const url = this.serviceName + '/' + this.entityPath + '(' + entityIdStr + ')';\r\n        return this.httpSvc.initiateRequest('DELETE', url, {}, headers);\r\n\r\n    }\r\n\r\n    getEntityIdAsString(entityID) {\r\n        let entityIdStr = '';\r\n        if (typeof entityID === 'string') {\r\n            return `'${entityID}'`;\r\n        } else if (typeof entityID === 'object') {\r\n            for (const key in entityID) {\r\n                if (entityID.hasOwnProperty(key)) {\r\n                    const value = entityID[key];\r\n                    if ( typeof value === 'number') {\r\n                        entityIdStr += key + '=' + value + ',';\r\n                    } else if (typeof value === 'string') {\r\n                        entityIdStr += key + '=\\'' + value + '\\',';\r\n                    }\r\n                }\r\n            }\r\n            entityIdStr = entityIdStr.substr(0, entityIdStr.length - 1);\r\n        }\r\n        return entityIdStr;\r\n    }\r\n\r\n    validateQueryParamString(queryParams) {\r\n        queryParams = queryParams.trim();\r\n        if (queryParams.indexOf('?') > -1) {\r\n            const segments = queryParams.split('?');\r\n            if (segments.length === 2) {\r\n                return segments[1];\r\n            }\r\n            throw Error('Invalid query param string');\r\n\r\n        } else {\r\n            return queryParams;\r\n        }\r\n    }\r\n}\r\n\r\n","export default class Deferred {\r\n    promise;then;reject;resolve;catchError;\r\n    constructor() {\r\n        this.promise = new Promise((function(resolve, reject) {\r\n            this.resolve = resolve;\r\n            this.reject = reject;\r\n        }).bind(this));\r\n\r\n        this.then = this.promise.then.bind(this.promise);\r\n        this.catchError = this.promise['catch'].bind(this.promise);\r\n    }\r\n\r\n}\r\n","export class CoreException {\r\n    status;\r\n    textStatus;\r\n    errorThrown;\r\n    constructor( status, textStatus, errorThrown) {\r\n        this.status = status;\r\n        this.textStatus = textStatus;\r\n        this.errorThrown = errorThrown;\r\n    }\r\n    getTextStatus() {\r\n        return this.textStatus;\r\n    }\r\n    getError() {\r\n        return this.errorThrown;\r\n    }\r\n\r\n    getStatusCode() {\r\n        return this.status;\r\n    }\r\n}\r\n","/*eslint class-methods-use-this: 0*/\r\n/*eslint dot-notation: 0*/\r\nimport axios from 'axios';\r\nimport Deferred from './deferred';\r\n\r\nimport {CoreException} from './core-exception';\r\n\r\nexport class HttpService {\r\n\r\n    initiateRequest(method, url, params = {}, headers = {}, payload = null, responseType) {\r\n        method = method.toLowerCase();\r\n        let config = {};\r\n        config.url = url;\r\n        config.method = method;\r\n        config.withCredentials = true;\r\n        if (typeof params === 'object') {\r\n            config.params = params;\r\n        }\r\n        config.headers = headers;\r\n\r\n        if (method === 'POST' || method === 'PUT') {\r\n            config.data = payload;\r\n        }\r\n        if (responseType) {\r\n            config.responseType = responseType;\r\n        }\r\n        const requestPromise = axios.request(config) ;\r\n        const deferred = new Deferred();\r\n        requestPromise.then(data => {\r\n            deferred.resolve(data.data);\r\n        })\r\n            .catch(\r\n                error => {\r\n                    const status = error.status;\r\n                    const statusText = error.statusText;\r\n                    const errorText = error.data;\r\n                    const exp = new CoreException(status, statusText, errorText);\r\n                    deferred.reject(exp);\r\n                }\r\n            );\r\n        return deferred;\r\n\r\n    }\r\n}\r\n","import { RestClient } from './rest-client';\r\nimport { ODataClient } from './odata-client';\r\nimport { HttpService } from './http.service';\r\n\r\n\r\nexport class ModelFactory {\r\n\r\n    constructor( ) {\r\n        this.httpSvc = new HttpService();\r\n    }\r\n\r\n    getRESTModel(serviceName) {\r\n    // serviceName = this.validateServiceNameOrEntityName(serviceName);\r\n        const model = new RestClient(this.httpSvc, serviceName);\r\n        return model;\r\n    }\r\n\r\n    // entityPath=entityContainer.entitySetName\r\n    getODataModel(serviceName, entityPath) {\r\n        //  serviceName = this.validateServiceNameOrEntityName(serviceName);\r\n        //  entityPath = this.validateServiceNameOrEntityName(entityPath);\r\n        const model = new ODataClient(this.httpSvc, serviceName, entityPath);\r\n        return model;\r\n    }\r\n\r\n\r\n    validateServiceNameOrEntityName(name) {\r\n        name = name.trim();\r\n        if (name.indexOf('/') > -1) {\r\n            const segments = name.split('/');\r\n            if (segments.length === 2) {\r\n                return segments[1];\r\n            }\r\n            throw Error('Invalid service or entity name');\r\n\r\n        } else {\r\n            return name;\r\n        }\r\n    }\r\n}\r\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { ModelFactory } from './core/model-factory';\n\nconst downloadFile = async (url,header) => {\n\n  const restClient = new ModelFactory().getRESTModel(url);\n  const queryParam = {};\n  try {\n      await restClient.findAll( queryParam, header);\n  } catch (error) {\n      console.log(error);\n  }\n};\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p onClick={()=>{downloadFile('downloadtext',{\n      Accept: 'text/plain'\n  })}}>\n            download text\n          </p>\n          <p onClick={()=>{downloadFile('downloadpdf',{\n              Accept: 'application/pdf'\n          })}}>\n            download pdf\n          </p>\n          <a target=\"_parent\" href=\"http://localhost:8080/downloadtext\" download> download text</a>\n          <a target=\"_parent\" href=\"http://localhost:8080/downloadpdf\" download> download pdf</a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}